<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于PicGo+Github RAW和Typora简化Markdown写作流程</title>
    <url>/2024/01/27/blog-image-upload/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Markdown格式的文章呈现出来的风格固然简洁且优雅，但在还没完全熟悉Markdown语法以及解决上传图片和复制链接的繁琐之前，文章思路总会在编写过程的被上述问题而打断。因此，一款好用的Markdown编辑工具，以及方便集成和扩展的图片上传工具对于简化文章写作流程就显得尤为重要。尤其是这两款工具如果能实现无缝衔接，那么会更加方便作者将心思更多地放在文章的内容上。下面我将介绍一种解决方案，使用基于PicGo+Github RAW的图片上传工具和Typora编辑器来提升图片加载速度和简化写作流程。  </p>
<ul>
<li><p><a href="https://molunerfinn.com/PicGo/">PicGo</a>  </p>
<blockquote>
<p>PicGo是一款方便简洁的图片上传工具，支持本地查看和管理上传记录，支持Github、SM.MS、七牛云、腾讯云COS和阿里云OSS等多种图床设置，支持自定义插件安装，如上传时自动进行图片压缩等。详见<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo is Here | PicGo</a>。</p>
</blockquote>
</li>
<li><p><a href="https://gitmirror.com/raw.html">Github RAW</a>  </p>
<blockquote>
<p>方便在中国大陆地区流畅地访问 Github RAW 资源的一项服务，只需要简单地替换一下网址，就可以在任何地方、任何时候轻松访问 Github 的各种 RAW 资源，包括代码片段、文件和其他相关内容。</p>
</blockquote>
</li>
<li><p><a href="https://www.typora.net/">Typora</a>  </p>
<blockquote>
<p>Typora是一款极简风格的轻量级Markdown编辑器，不仅具备方便快捷的编辑功能，还支持动态预览，所写即所见，以及丰富的文件导出类型。最重要的是支持PicGo，在使用Markdown格式编写文章时，能够实现方便快捷的【粘贴图片-&gt;图片自动上传】的操作。</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="PicGo-Github-RAW轻松搞定图片上传"><a href="#PicGo-Github-RAW轻松搞定图片上传" class="headerlink" title="PicGo+Github RAW轻松搞定图片上传"></a>PicGo+Github RAW轻松搞定图片上传</h3><h4 id="搭建Github图床"><a href="#搭建Github图床" class="headerlink" title="搭建Github图床"></a>搭建Github图床</h4><ul>
<li><h5 id="创建Github-Repository"><a href="#创建Github-Repository" class="headerlink" title="创建Github Repository"></a>创建Github Repository</h5></li>
</ul>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127161107651.png" alt="image-20240127161107651"></p>
<p>创建一个专门用于存放博客图片的仓库。我的习惯是每篇文章单独创建一个文件夹，这样方便后期图片的管理。</p>
<ul>
<li><h5 id="生成Access-ToKen"><a href="#生成Access-ToKen" class="headerlink" title="生成Access ToKen"></a>生成Access ToKen</h5></li>
</ul>
<p><code>Github头像</code> -&gt; <code>Settings</code> -&gt; <code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; <code>Tokens (classic)</code>：</p>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127161920562.png" alt="image-20240127161920562"></p>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127162255046.png" alt="image-20240127162255046"></p>
<p><code>Expiration</code>代表这个token的过期时间，自己根据实际情况设置。访问权限范围选择<code>repo</code>即可。创建成功后会获得一串代码，记得把代码复制到其他地方保存一下，不然刷新网页就看不到了。</p>
<h4 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h4><p>下面只简单介绍Github图床和插件的设置，其他详细配置步骤见<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E9%A2%84%E8%A7%88">配置手册 | PicGo</a>。</p>
<ul>
<li><h5 id="Github图床设置"><a href="#Github图床设置" class="headerlink" title="Github图床设置"></a>Github图床设置</h5></li>
</ul>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127165658022.png" alt="image-20240127165658022"></p>
<p><code>仓库名</code>：Github用户名&#x2F;仓库</p>
<p><code>分支名</code>：根据你仓库分支来，一般创建完默认为<strong>main</strong>或者<strong>master</strong>。</p>
<p><code>Token</code>：就是上一步骤中生成的<strong>person access token</strong>。</p>
<p><code>存储路径</code>：仓库中具体存放图片的路径，存放在根路径的话可以为空。如果你像我每篇文章一个存放路径的话，那记得每次写之前把相应的存储路径也修改一下。</p>
<p><code>自定义域名</code>：这个设置主要为你在PicGo上传完图片后，用于生成图片链接使用。由于我们使用的Github作为图床，因此为空的话，会生成类似<code>https://raw.githubusercontent.com/用户名/仓库/分支/存储路径/图片名称.png</code>的链接地址。此处设置可方便使用cdn来加速图片加载。</p>
<ul>
<li><h5 id="PicGo的使用"><a href="#PicGo的使用" class="headerlink" title="PicGo的使用"></a>PicGo的使用</h5></li>
</ul>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127170427425.png" alt="image-20240127170427425"></p>
<p>配置完成之后，现在只需要将图片拖拽到PicGo里，或者直接点击剪贴板图片，PicGo上传成功之后会自动生成相应格式的图片链接，并复制到剪贴板，你只需要<code>ctrl + v</code>粘贴到你文章里即可。</p>
<ul>
<li><h5 id="插件设置-图片压缩"><a href="#插件设置-图片压缩" class="headerlink" title="插件设置-图片压缩"></a>插件设置-图片压缩</h5></li>
</ul>
<p>在没有经过任何处理的情况下，图片都是原图上传的，实际浏览过程中会发现图片加载很慢，尤其是在国内访问Github的情况下。我们有时候并不需要很高清的图片，并且更希望图片能快速加载出来。因此可以在图片上传之前进行压缩处理。PicGo集成了很多插件，可以直接在<code>插件设置</code>里搜索，也可以访问<a href="https://github.com/PicGo/Awesome-PicGo">Awesome-PicGo: A collection of awesome projects using PicGo.</a>查找插件。我选择的是下图中的压缩插件，它可以在图片上传前自动对图片完成压缩。压缩后的图像质量也还可以，关键是文件很小，一般都只有几十k，能满足快速加载的需求。</p>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127171406183.png" alt="image-20240127171406183"></p>
<h4 id="Github-RAW加速图片加载"><a href="#Github-RAW加速图片加载" class="headerlink" title="Github RAW加速图片加载"></a>Github RAW加速图片加载</h4><p>Github在国内的访问还是很不稳定，为了进一步加速网页资源的加载速度，使用Github自带的加速服务，只需要将图片链接中的<code>raw.githubusercontent.com</code>简单替换成<code>raw.gitmirror.com</code>即可。这个步骤可以在PicGo的Github图床配置中自动实现，参考下图，将其中的<code>自定义域名</code>修改为<code>https://raw.gitmirror.com/用户名/仓库/分支</code>。</p>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127173119878.png" alt="image-20240127173119878"></p>
<hr>
<h3 id="Typora集成PicGo"><a href="#Typora集成PicGo" class="headerlink" title="Typora集成PicGo"></a>Typora集成PicGo</h3><p>完成上述步骤已经可以很方便地完成截图 -&gt; 上传图片 -&gt; 粘贴图片链接的操作了，但每一次截完图之后还要再切出去点一下总归是有点不爽，所有有没有办法省去这一步？有的，答案就是使用Typora这个编辑器。<code>文件</code> -&gt; <code>偏好设置</code>：</p>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/blog_image_upload/image-20240127173608171.png" alt="image-20240127173608171"></p>
<p>通过<code>验证图片上传选项</code>测试是否配置成功。测试通过后，<code>截图 -&gt; 上传图片 -&gt; 粘贴图片链接</code>就变成<code>截图 -&gt; 粘贴图片链接</code>。</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>Github RAW</tag>
        <tag>Typora</tag>
        <tag>个人博客</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo和Github Pages快速搭建个人博客</title>
    <url>/2024/01/10/how-to-build-a-blog/</url>
    <content><![CDATA[<h3 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h3><p>在开始正式的搭建步骤之前，需要先安装以下组件：</p>
<ul>
<li>Git</li>
<li>Node.js（版本&gt;&#x3D;10.13，推荐12.0及以上）  </li>
<li>cnpm</li>
<li>hexo-cli</li>
</ul>
<blockquote>
<p>为了防止出现莫名其妙的Bug，Hexo与Node.js的版本最好根据官方文档指导的对应关系进行安装，参考<a href="https://hexo.io/docs/#Required-Node-js-version">https://hexo.io/docs/#Required-Node-js-version</a></p>
</blockquote>
<span id="more"></span>
<p>以下安装过程建立在win11系统的基础上：</p>
<h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/download/win">Git</a></h4><p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113142107.png"><br>打开安装文件，一路默认设置即可：<br><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113142407.png"><br>安装完成之后，桌面右键打开出现<code>Git Bash Here</code>即表示安装成功。<br><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113144641.png"></p>
<h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="http://nodejs.cn/download/">Node.js</a></h4><p>下载相应的软件安装包：<br><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113140034.png" alt="alt Node.js下载页面"><br>打开安装包，确保包含以下安装选项，其他默认安装即可：<br><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113143935.png"><br>验证是否安装成功:<br>桌面右键选中<code>Git Bash Here</code>，执行以下命令，出现相应版本号即安装成功。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113145308.png"></p>
<h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><p>npm在国内下载速度太慢，可以把它换成淘宝的镜像。在上述命令窗口中执行以下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>验证是否安装成功: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113145551.png"></p>
<h4 id="hexo-cli"><a href="#hexo-cli" class="headerlink" title="hexo-cli"></a>hexo-cli</h4><p>新建文件夹（如<code>blog</code>）用于存放Hexo产生的各类文件，在<code>blog</code>文件夹中右键选择<code>Git Bash Here</code>，执行以下命令安装hexo-cli：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="初始化并运行Hexo"><a href="#初始化并运行Hexo" class="headerlink" title="初始化并运行Hexo"></a>初始化并运行Hexo</h3><h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113150632.png">  </p>
<h4 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113150722.png">  </p>
<p>至此，已经在本地成功建立博客网站，可在浏览器中打开<a href="http://localhost:4000/">http://localhost:4000</a>进行预览（因为该文章是在搭建好后编写的，因此与初始页面有区别）：<br><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113151134.png">  </p>
<hr>
<h3 id="利用Github-Pages部署博客"><a href="#利用Github-Pages部署博客" class="headerlink" title="利用Github Pages部署博客"></a>利用Github Pages部署博客</h3><p>以上博客只能在本地访问，如果想要实现网上访问，那么还需要在一些提供静态代码托管的网站上进行部署，以下介绍如何利用Github Pages进行博客的部署。</p>
<h4 id="创建和设置username-github-io仓库"><a href="#创建和设置username-github-io仓库" class="headerlink" title="创建和设置username.github.io仓库"></a>创建和设置username.github.io仓库</h4><p>项目名称必须为username.github.io，其中username是Github账号的用户名。<br><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113223127.png"><br>打开仓库，进行如下设置，会生成相应的Github Page访问地址。<br><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113232227.png"></p>
<h4 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h4><p>任意位置右键选择<code>Git Bash Here</code>，执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>以上的<code>youremail</code>代表你自己的邮箱。输出生成的SSH key，复制备用（从ssh-rsa开始）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<h4 id="配置SSH-Key和Git相关信息"><a href="#配置SSH-Key和Git相关信息" class="headerlink" title="配置SSH Key和Git相关信息"></a>配置SSH Key和Git相关信息</h4><p>点击Github个人账户里的<code>setting</code>，选择<code>SSH and GPG keys</code>，点击<code>New SSH Key</code>，将刚才复制的SSH key粘贴进去，保存即可。</p>
<p><img data-src="https://raw.gitmirror.com/trek-cai/pic-storage/main/how-to-build-a-blog/20240113223548.png"><br>在<code>blog</code>文件夹中右键选择<code>Git Bash Here</code>，执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>根据提示回复<code>yes</code>即可。然后再执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>上面的<code>yourname</code>和<code>youremail</code>代表了Git中提交代码者的身份，根据实际情况填写即可。</p>
<h4 id="部署Github-Page"><a href="#部署Github-Page" class="headerlink" title="部署Github Page"></a>部署Github Page</h4><ol>
<li>安装hexo-deployer-git<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>修改_config.yml的deploy配置</li>
</ol>
<p>打开<code>blog</code>文件夹下的_config.yml文件，找到deploy配置信息，修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>运行<code>hexo clean &amp;&amp; hexo deploy</code>，稍等一段时间，访问<code>https://&lt;username&gt;.github.io/</code>检查部署情况。</li>
</ol>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://hexo.io/docs/">https://hexo.io/docs/</a> （官方文档，推荐）</li>
<li><a href="https://hexo.io/docs/github-pages">https://hexo.io/docs/github-pages</a></li>
<li><a href="https://www.cnblogs.com/huanhao/p/hexobase.html#%E5%9F%BA%E7%A1%80%E7%AF%87%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E4%B8%80">https://www.cnblogs.com/huanhao/p/hexobase.html#%E5%9F%BA%E7%A1%80%E7%AF%87%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E4%B8%80</a></li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
